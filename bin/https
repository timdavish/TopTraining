#!/usr/bin/env node

// Module dependencies
var app = require('../server/server');
var debug = require('debug')('top-training:server');
var fs = require('fs');
var https = require('https');
var httpsOptions = {
	key: fs.readFileSync('server/server-key.pem'),
    cert: fs.readFileSync('server/server-crt.pem'),
    ca: fs.readFileSync('server/ca-crt.pem')
};

// Get port from environment and store in Express
var defaultPort = 443; // If environment port unavailable, use default
var port = normalizePort(process.env.PORT || defaultPort);
app.set('port', port);

var server = https.createServer(httpsOptions, function(req, res) {
	console.log(new Date() + ' ' +
		req.connection.remoteAddress + ' ' +
		req.method + ' ' + req.url);

	res.writeHead(200);
	res.end('Hello world');
});

// Listen on provided port, on all network interfaces
server.listen(port);

// Create HTTP server
// var server = http.createServer(app);

// server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 * @param {value} val The port value to normalize
 * @return port or false
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 * @param {event} error The error to address
 */
function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
		'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
		'pipe ' + addr : 'port ' + addr.port;
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
}
